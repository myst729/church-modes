{"version":3,"sources":["common/utils.ts","components/Tonics.tsx","components/Modes.tsx","components/Keyboard.tsx","common/audio.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["enumKeys","obj","Object","keys","filter","k","Number","isNaN","TonicsType","ModesType","Tonics","props","defaultTonic","C","onTonicChange","useState","tonic","setTonic","options","map","key","label","value","className","style","marginTop","Title","level","Group","onChange","e","val","target","optionType","buttonStyle","Modes","defaultMode","Ionian","onModeChange","mode","setMode","scaling","setScaling","useEffect","split","s","i","left","Keyboard","audio","context","AudioContext","tone","frequency","oscillator","createOscillator","connect","destination","start","stop","currentTime","getInstance","keyboardClassName","setKeyboardClassName","playNote","tonicName","modeName","toLowerCase","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b50dc865.chunk.js","sourcesContent":["export function enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\n    return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\n}\n","import React, { useState } from 'react'\nimport { Radio, Typography } from 'antd'\nimport { enumKeys } from '../common/utils'\n\nexport enum TonicsType {\n  C = 1,\n  D,\n  E,\n  F,\n  G,\n  A,\n  B,\n}\n\ninterface ITonicsProps {\n  defaultTonic?: TonicsType;\n  onTonicChange: (v: TonicsType) => void;\n}\n\nconst Tonics = (props: ITonicsProps) => {\n  const {\n    defaultTonic = TonicsType.C,\n    onTonicChange\n  } = props\n\n  const [tonic, setTonic] = useState<TonicsType>(defaultTonic)\n\n  const onChange = (e: any) => {\n    const val = e.target.value\n    setTonic(val)\n    onTonicChange(val)\n  }\n\n  const options = enumKeys(TonicsType).map((key: string) => ({\n    label: key,\n    value: TonicsType[key as unknown as TonicsType],\n  }))\n\n  return (\n    <div className=\"tonics\" style={{ marginTop: 20 }}>\n      <Typography.Title level={2}>Tonic</Typography.Title>\n      <div>\n        <Radio.Group\n          value={tonic}\n          options={options}\n          onChange={onChange}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Tonics\n","import React, { useState, useEffect } from 'react'\nimport { Radio, Typography } from 'antd'\nimport { enumKeys } from '../common/utils'\nimport './Modes.css'\n\nexport enum ModesType {\n  Ionian = 1,\n  Dorian,\n  Phrygian,\n  Lydian,\n  Mixolydian,\n  Aeolian,\n  Locrian,\n}\n\ninterface IModesProps {\n  defaultMode?: ModesType;\n  onModeChange: (v: ModesType) => void;\n}\n\nconst Modes = (props: IModesProps) => {\n  const {\n    defaultMode = ModesType.Ionian,\n    onModeChange\n  } = props\n\n  const [mode, setMode] = useState<ModesType>(defaultMode)\n  const [scaling, setScaling] = useState<number>(0)\n\n  const onChange = (e: any) => {\n    const val = e.target.value\n    setMode(val)\n    onModeChange(val)\n  }\n\n  useEffect(() => {\n    setScaling((mode - 1) * 40)\n  }, [mode])\n\n  const options = enumKeys(ModesType).map((key: string) => ({\n    label: key,\n    value: ModesType[key as unknown as ModesType],\n  }))\n\n  return (\n    <div className=\"modes\" style={{ marginTop: 20 }}>\n      <Typography.Title level={2}>Mode</Typography.Title>\n      <div>\n        <Radio.Group\n          value={mode}\n          options={options}\n          onChange={onChange}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </div>\n      <div className=\"steps\">\n        {'WWHWWWHWWHWWW'.split('').map((s: string, i: number) => (\n          <span className=\"step\" key={i}>{s}</span>\n        ))}\n        <div className=\"frame\" style={{ left: scaling }} />\n      </div>\n    </div>\n  )\n}\n\nexport default Modes\n","import React, { useState, useEffect } from 'react'\nimport { TonicsType } from './Tonics'\nimport { ModesType } from './Modes'\nimport { getInstance } from '../common/audio'\nimport './Keyboard.css'\n\ninterface IKeyboardProps {\n  tonic?: TonicsType;\n  mode?: ModesType;\n}\n\nconst Keyboard = (props: IKeyboardProps) => {\n  const audio = getInstance({})\n  const { tonic, mode } = props\n  const [keyboardClassName, setKeyboardClassName] = useState<string>('')\n\n  const playNote = (frequency: number) => {\n    audio.tone({ frequency })\n  }\n\n  useEffect(() => {\n    const tonicName = TonicsType[tonic as unknown as TonicsType]\n    const modeName = ModesType[mode as unknown as ModesType]\n    setKeyboardClassName(`keyboard-${tonicName}-${modeName}`.toLowerCase())\n  }, [tonic, mode])\n\n  return (\n    <div className={keyboardClassName}>\n      <div className=\"keys\">\n        <div className=\"white\" onClick={() => playNote(261.63)}></div>\n        <div className=\"black\" onClick={() => playNote(277.18)} style={{ left: 40 }}></div>\n        <div className=\"white\" onClick={() => playNote(293.66)}></div>\n        <div className=\"black\" onClick={() => playNote(311.13)} style={{ left: 110 }}></div>\n        <div className=\"white\" onClick={() => playNote(329.63)}></div>\n        <div className=\"white\" onClick={() => playNote(349.23)}></div>\n        <div className=\"black\" onClick={() => playNote(369.99)} style={{ left: 220 }}></div>\n        <div className=\"white\" onClick={() => playNote(392.00)}></div>\n        <div className=\"black\" onClick={() => playNote(415.30)} style={{ left: 285 }}></div>\n        <div className=\"white\" onClick={() => playNote(440.00)}></div>\n        <div className=\"black\" onClick={() => playNote(466.16)} style={{ left: 350 }}></div>\n        <div className=\"white\" onClick={() => playNote(493.88)}></div>\n        <div className=\"white\" onClick={() => playNote(523.25)}></div>\n        <div className=\"black\" onClick={() => playNote(554.37)} style={{ left: 460 }}></div>\n        <div className=\"white\" onClick={() => playNote(587.33)}></div>\n        <div className=\"black\" onClick={() => playNote(622.25)} style={{ left: 530 }}></div>\n        <div className=\"white\" onClick={() => playNote(659.26)}></div>\n        <div className=\"white\" onClick={() => playNote(698.46)}></div>\n        <div className=\"black\" onClick={() => playNote(739.99)} style={{ left: 640 }}></div>\n        <div className=\"white\" onClick={() => playNote(783.99)}></div>\n        <div className=\"black\" onClick={() => playNote(830.61)} style={{ left: 705 }}></div>\n        <div className=\"white\" onClick={() => playNote(880.00)}></div>\n        <div className=\"black\" onClick={() => playNote(932.33)} style={{ left: 770 }}></div>\n        <div className=\"white\" onClick={() => playNote(987.77)}></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Keyboard\n","interface IAudioTone {\n  frequency?: number;\n  value?: number;\n}\n\nexport const getInstance = (options: AudioContextOptions) => {\n  const context = new AudioContext(options)\n\n  return {\n    tone: ({frequency = 440, value = 187.5}: IAudioTone) => {\n      // Standard A4, Semiquaver at 80BPM\n      const oscillator = context.createOscillator()\n      oscillator.connect(context.destination)\n      oscillator.frequency.value = frequency\n      oscillator.start()\n      oscillator.stop(context.currentTime + value/1000)\n    }\n  }\n}\n","import React, { useState } from 'react'\nimport { Typography } from 'antd'\nimport './App.css'\n\nimport Keyboard from './components/Keyboard'\nimport Tonics, { TonicsType } from './components/Tonics'\nimport Modes, { ModesType } from './components/Modes'\n\nconst App = () => {\n  const [tonic, setTonic] = useState<TonicsType>(TonicsType.C)\n  const [mode, setMode] = useState<ModesType>(ModesType.Ionian)\n\n  return (\n    <div className=\"App\">\n      <Typography.Title>Medieval Church Modes</Typography.Title>\n      <Keyboard tonic={tonic} mode={mode} />\n      <Tonics defaultTonic={tonic} onTonicChange={setTonic} />\n      <Modes defaultMode={mode} onModeChange={setMode} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}