{"version":3,"sources":["common/utils.ts","components/Tonics.tsx","components/Modes.tsx","components/Keyboard.tsx","common/audio.ts","components/Presets.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["enumKeys","obj","Object","keys","filter","k","Number","isNaN","TonicsType","ModesType","Tonics","props","tonic","C","onChange","options","map","key","label","value","className","style","marginTop","Title","level","Group","e","target","optionType","buttonStyle","Modes","mode","Ionian","useState","scaling","setScaling","useEffect","split","s","i","left","Keyboard","audio","context","AudioContext","tone","frequency","oscillator","createOscillator","connect","destination","start","stop","currentTime","getInstance","keyboardClassName","setKeyboardClassName","playNote","tonicName","modeName","toLowerCase","onClick","Presets","presets","D","Dorian","E","Phrygian","F","Lydian","G","Mixolydian","A","Aeolian","B","Locrian","preset","val","onPresetChange","App","setTonic","setMode","combination","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33c8b35f.chunk.js","sourcesContent":["export function enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\n    return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\n}\n","import React from 'react'\nimport { Radio, RadioChangeEvent, Typography } from 'antd'\nimport { enumKeys } from '../common/utils'\n\nexport enum TonicsType {\n  C = 1,\n  D,\n  E,\n  F,\n  G,\n  A,\n  B,\n}\n\ninterface ITonicsProps {\n  tonic?: TonicsType;\n  onChange?: (v: TonicsType) => void;\n}\n\nconst Tonics = (props: ITonicsProps) => {\n  const {\n    tonic = TonicsType.C,\n    onChange\n  } = props\n\n  const options = enumKeys(TonicsType).map((key: string) => ({\n    label: key,\n    value: TonicsType[key as unknown as TonicsType],\n  }))\n\n  const onTonicChange = (e: RadioChangeEvent) => {\n    onChange && onChange(e.target.value)\n  }\n\n  return (\n    <div className=\"tonics\" style={{ marginTop: 30 }}>\n      <Typography.Title level={2}>Tonic</Typography.Title>\n      <div>\n        <Radio.Group\n          value={tonic}\n          options={options}\n          onChange={onTonicChange}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Tonics\n","import React, { useState, useEffect } from 'react'\nimport { Radio, RadioChangeEvent, Typography } from 'antd'\nimport { enumKeys } from '../common/utils'\nimport './Modes.css'\n\nexport enum ModesType {\n  Ionian = 1,\n  Dorian,\n  Phrygian,\n  Lydian,\n  Mixolydian,\n  Aeolian,\n  Locrian,\n}\n\ninterface IModesProps {\n  mode?: ModesType;\n  onChange?: (v: ModesType) => void;\n}\n\nconst Modes = (props: IModesProps) => {\n  const {\n    mode = ModesType.Ionian,\n    onChange\n  } = props\n\n  const [scaling, setScaling] = useState<number>(0)\n\n  const onModeChange = (e: RadioChangeEvent) => {\n    onChange && onChange(e.target.value)\n  }\n\n  useEffect(() => {\n    setScaling((mode - 1) * 40)\n  }, [mode])\n\n  const options = enumKeys(ModesType).map((key: string) => ({\n    label: key,\n    value: ModesType[key as unknown as ModesType],\n  }))\n\n  return (\n    <div className=\"modes\" style={{ marginTop: 30 }}>\n      <Typography.Title level={2}>Mode</Typography.Title>\n      <div>\n        <Radio.Group\n          value={mode}\n          options={options}\n          onChange={onModeChange}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </div>\n      <div className=\"steps\">\n        {'WWHWWWHWWHWWW'.split('').map((s: string, i: number) => (\n          <span className=\"step\" key={i}>{s}</span>\n        ))}\n        <div className=\"frame\" style={{ left: scaling }} />\n      </div>\n    </div>\n  )\n}\n\nexport default Modes\n","import React, { useState, useEffect } from 'react'\nimport { TonicsType } from './Tonics'\nimport { ModesType } from './Modes'\nimport { getInstance } from '../common/audio'\nimport './Keyboard.css'\n\ninterface IKeyboardProps {\n  tonic?: TonicsType;\n  mode?: ModesType;\n}\n\nconst Keyboard = (props: IKeyboardProps) => {\n  const audio = getInstance({})\n  const { tonic, mode } = props\n  const [keyboardClassName, setKeyboardClassName] = useState<string>('')\n\n  const playNote = (frequency: number) => {\n    audio.tone({ frequency })\n  }\n\n  useEffect(() => {\n    const tonicName = TonicsType[tonic as unknown as TonicsType]\n    const modeName = ModesType[mode as unknown as ModesType]\n    setKeyboardClassName(`keyboard-${tonicName}-${modeName}`.toLowerCase())\n  }, [tonic, mode])\n\n  return (\n    <div className={keyboardClassName}>\n      <div className=\"keys\">\n        <div className=\"white\" onClick={() => playNote(261.63)}></div>\n        <div className=\"black\" onClick={() => playNote(277.18)} style={{ left: 40 }}></div>\n        <div className=\"white\" onClick={() => playNote(293.66)}></div>\n        <div className=\"black\" onClick={() => playNote(311.13)} style={{ left: 110 }}></div>\n        <div className=\"white\" onClick={() => playNote(329.63)}></div>\n        <div className=\"white\" onClick={() => playNote(349.23)}></div>\n        <div className=\"black\" onClick={() => playNote(369.99)} style={{ left: 220 }}></div>\n        <div className=\"white\" onClick={() => playNote(392.00)}></div>\n        <div className=\"black\" onClick={() => playNote(415.30)} style={{ left: 285 }}></div>\n        <div className=\"white\" onClick={() => playNote(440.00)}></div>\n        <div className=\"black\" onClick={() => playNote(466.16)} style={{ left: 350 }}></div>\n        <div className=\"white\" onClick={() => playNote(493.88)}></div>\n        <div className=\"white\" onClick={() => playNote(523.25)}></div>\n        <div className=\"black\" onClick={() => playNote(554.37)} style={{ left: 460 }}></div>\n        <div className=\"white\" onClick={() => playNote(587.33)}></div>\n        <div className=\"black\" onClick={() => playNote(622.25)} style={{ left: 530 }}></div>\n        <div className=\"white\" onClick={() => playNote(659.26)}></div>\n        <div className=\"white\" onClick={() => playNote(698.46)}></div>\n        <div className=\"black\" onClick={() => playNote(739.99)} style={{ left: 640 }}></div>\n        <div className=\"white\" onClick={() => playNote(783.99)}></div>\n        <div className=\"black\" onClick={() => playNote(830.61)} style={{ left: 705 }}></div>\n        <div className=\"white\" onClick={() => playNote(880.00)}></div>\n        <div className=\"black\" onClick={() => playNote(932.33)} style={{ left: 770 }}></div>\n        <div className=\"white\" onClick={() => playNote(987.77)}></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Keyboard\n","interface IAudioTone {\n  frequency?: number;\n  value?: number;\n}\n\nexport const getInstance = (options: AudioContextOptions) => {\n  const context = new AudioContext(options)\n\n  return {\n    tone: ({frequency = 440, value = 187.5}: IAudioTone) => {\n      // Standard A4, Semiquaver at 80BPM\n      const oscillator = context.createOscillator()\n      oscillator.connect(context.destination)\n      oscillator.frequency.value = frequency\n      oscillator.start()\n      oscillator.stop(context.currentTime + value/1000)\n    }\n  }\n}\n","import React from 'react'\nimport { Button, Typography } from 'antd'\nimport { TonicsType } from './Tonics'\nimport { ModesType } from './Modes'\n\ninterface IPresetsProps {\n  onChange?: (v: [TonicsType, ModesType]) => void;\n}\n\nconst Presets = (props: IPresetsProps) => {\n  const { onChange } = props\n\n  const presets: [TonicsType, ModesType][] = [\n    [TonicsType.C, ModesType.Ionian],\n    [TonicsType.D, ModesType.Dorian],\n    [TonicsType.E, ModesType.Phrygian],\n    [TonicsType.F, ModesType.Lydian],\n    [TonicsType.G, ModesType.Mixolydian],\n    [TonicsType.A, ModesType.Aeolian],\n    [TonicsType.B, ModesType.Locrian],\n  ]\n\n  const onPresetChange = (val: [TonicsType, ModesType]) => {\n    const [tonic, mode] = val\n    onChange && onChange([tonic, mode])\n  }\n\n  return (\n    <div className=\"presets\" style={{ marginTop: 30 }}>\n      <Typography.Title level={2}>Presets</Typography.Title>\n      <div>\n        <Button.Group>\n          {presets.map((preset: [TonicsType, ModesType], i: number) => {\n            const [tonic, mode] = preset\n            const tonicName = TonicsType[tonic as unknown as TonicsType]\n            const modeName = ModesType[mode as unknown as ModesType]\n            return (\n              <Button onClick={() => onPresetChange(preset)} key={i}>\n                {`${tonicName} ${modeName}`}\n              </Button>\n            )\n          })}\n        </Button.Group>\n      </div>\n    </div>\n  )\n}\n\nexport default Presets\n","import React, { useState } from 'react'\nimport { Typography } from 'antd'\nimport './App.css'\n\nimport Keyboard from './components/Keyboard'\nimport Tonics, { TonicsType } from './components/Tonics'\nimport Modes, { ModesType } from './components/Modes'\nimport Presets from './components/Presets'\n\nconst App = () => {\n  const [tonic, setTonic] = useState<TonicsType>(TonicsType.C)\n  const [mode, setMode] = useState<ModesType>(ModesType.Ionian)\n  \n  const onPresetSelect = (combination: [TonicsType, ModesType]) => {\n    const [tonic, mode] = combination\n    setTonic(tonic)\n    setMode(mode)\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography.Title>Medieval Church Modes</Typography.Title>\n      <Keyboard tonic={tonic} mode={mode} />\n      <Tonics tonic={tonic} onChange={setTonic} />\n      <Modes mode={mode} onChange={setMode} />\n      <Presets onChange={onPresetSelect} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}